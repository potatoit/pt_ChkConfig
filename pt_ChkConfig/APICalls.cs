using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace pt_ChkConfig
{
    public class APICalls : APIService
    {

        public string CRS021MI_GetSrtOpt(string aTable, string aSortingOption)
        {
            string result = null;

            if(!string.IsNullOrEmpty(aTable) && !string.IsNullOrEmpty(aSortingOption))
            {
                string baseAPI = "m3api-rest/v2/execute/CRS021MI/GetSrtOpt";
                string arguments = "?FILE=" + aTable + "&SOPT=" + aSortingOption;

                string url = getIONAPIUrlForM3() + baseAPI + arguments;

                result = callService(new Uri(url));
            }

            return (result);
        }

        public string CRS021MI_AddSrtOpt(string aTable, string aSortingOption, string[] aValues)
        {
            string result = null;

            if (!string.IsNullOrEmpty(aTable) && !string.IsNullOrEmpty(aSortingOption) && null != aValues && aValues.Length > 0)
            {
                string baseAPI = "m3api-rest/v2/execute/CRS021MI/AddSrtOpt";
                string arguments = "?FILE=" + aTable + "&SOPT=" + aSortingOption + "&TX40=AutogeneratedFromCfgFile";

                string thirdDigit = "Y";

                int maxPosition = aValues.Length + 1;

                if(maxPosition > 16)
                {
                    maxPosition = 16;
                }

                for(int i = 1; i < maxPosition; i++)
                {
                    
                    arguments += ("&KE" + thirdDigit + i + "=" + aValues[i-1]);

                    if(i == 9)
                    {
                        thirdDigit = "";
                    }
                }

                string url = getIONAPIUrlForM3() + baseAPI + arguments;

                result = callService(new Uri(url));
            }

            return (result);
        }

        public string generateGenericCallUrl(string aProgram, string aTransaction, Dictionary<string, string> aFields)
        {
            string result = null;

            if (!string.IsNullOrEmpty(aProgram) && !string.IsNullOrEmpty(aTransaction))
            {
                string programTransaction = aProgram + "/" + aTransaction;
                string arguments = null;
                StringBuilder builder = new StringBuilder(1000);
                builder.Append("?");

                if (null != aFields && aFields.Count > 0)
                {
                    foreach (string key in aFields.Keys)
                    {
                        string value = aFields[key];
                        if (!string.IsNullOrEmpty(value))
                        {
                            if (builder.Length > 1)
                            {
                                builder.Append("&");
                            }
                            builder.Append(key);
                            builder.Append("=");

                            builder.Append(Uri.EscapeDataString(value));
                        }
                    }
                }

                if (builder.Length > 1)
                {
                    arguments = builder.ToString();
                }

                result = programTransaction + arguments;
            }

            return (result);
        }

        public string genericCalls(string aDataUrl)
        {
            string result = null;

            if(!string.IsNullOrEmpty(aDataUrl))
            {
                string baseAPI = "m3api-rest/v2/execute/" + aDataUrl;

                string url = getIONAPIUrlForM3() + baseAPI;

                result = callService(new Uri(url));
            }

            return (result);
        }
    }
}
